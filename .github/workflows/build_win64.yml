name: build_win64

on:
  push:
    branches: [ "main" ]

env:
  version: '0.0'
  asset_path: './assets'
  shader_path: './shaders'
  output_path: './space_fighter'
  output_bin_path: './space_fighter/bin/'
  output_asset_path: './space_fighter/assets/'
  output_shader_path: './space_fighter/shaders/'
  exe_path: './space_fighter/bin/space_fighter.exe'
  pdb_path: './space_fighter/bin/space_fighter.pdb'
  dependency_dir: './dependencies'
  zip_file_name: 'space_fighter'
  build_configuration: 'Release'
  source_path: './src/main.c'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
        token: ${{ secrets.PAT }}

    - name: Extract metadata
      shell: bash
      run: |
        echo "version=$version.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        echo "branchsafe=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's/[/]+/-/g')" >> $GITHUB_OUTPUT
        echo "repository=$(echo ${GITHUB_REPOSITORY#*/})" >> $GITHUB_OUTPUT
      id: extract_metadata      

    - name: Extract metadata environment
      shell: bash
      run: |
        echo "isProduction=$(echo 0)" >> $GITHUB_OUTPUT
        echo "isStaging=$(echo 0)" >> $GITHUB_OUTPUT
        echo "isTesting=$(echo 0)" >> $GITHUB_OUTPUT
        echo "isIntegration=$(echo 0)" >> $GITHUB_OUTPUT
        
        if [[ "${{ steps.extract_metadata.outputs.branch }}" == "${{ github.event.repository.default_branch }}" ]]
        then
              echo "name=$(echo production)" >> $GITHUB_OUTPUT
              echo "isProduction=$(echo 1)" >> $GITHUB_OUTPUT
        elif [[ "${{ steps.extract_metadata.outputs.branch }}" == "${{ env.stagingBranch }}" ]]
        then
              echo "name=$(echo staging)" >> $GITHUB_OUTPUT
              echo "isStaging=$(echo 1)" >> $GITHUB_OUTPUT
              echo "version=$version-preview" >> $GITHUB_ENV
        elif [[ "${{ steps.extract_metadata.outputs.branch }}" == "${{ env.testingBranch }}" ]] || [[ "${{ github.event.inputs.environment }}" == "testing" ]]
        then
              echo "name=$(echo testing)" >> $GITHUB_OUTPUT
              echo "isTesting=$(echo 1)" >> $GITHUB_OUTPUT
              echo "version=$version-qa" >> $GITHUB_ENV
        elif [[ "${{ steps.extract_metadata.outputs.branch }}" == "${{ env.integrationBranch }}" ]]
        then
              echo "name=$(echo integration)" >> $GITHUB_OUTPUT
              echo "isIntegration=$(echo 1)" >> $GITHUB_OUTPUT
              echo "version=$version-$integrationBranch" >> $GITHUB_ENV
        else
              echo "name=$(echo development)" >> $GITHUB_OUTPUT
              echo "isDevelopment=$(echo 1)" >> $GITHUB_OUTPUT
              echo "version=$version-dev" >> $GITHUB_ENV
        fi
      id: extract_metadata_environment

    - name: Configure build for amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64
    
    - name: Build
      shell: pwsh
      run: |
        New-Item -itemType Directory -Force -Path ${{ env.output_bin_path }};
        (Get-Content ${{ env.source_path }}) -replace "version-0.0.0", "version-${{ env.version }}" | Set-Content ${{ env.source_path }};
        cl /O2 /Zi /nologo /Fd:${{ env.pdb_path }} /Fo:"${{ env.output_bin_path }}\" /nologo /DSTB_IMAGE_IMPLEMENTATION `
          .\opus\lib\freetype.lib .\opus\lib\glfw3dll.lib .\opus\lib\glfw3.lib .\opus\lib\gl.obj opengl32.lib `
          /I".\include" /I".\opus\include" /I".\opus\src" ${{ env.source_path }} `
          /link /debug:full /pdb:${{ env.pdb_path }} /out:${{ env.exe_path }};
        
    - name: Copy dependencies
      shell: pwsh
      run: |
        New-Item -itemType Directory -Force -Path ${{ env.output_bin_path }}
        New-Item -itemType Directory -Force -Path ${{ env.output_asset_path }}
        New-Item -itemType Directory -Force -Path ${{ env.output_shader_path }}
        Copy-Item -Path "${{ env.dependency_dir }}/*" -Destination ${{ env.output_bin_path }} -Recurse
        Copy-Item -Path "${{ env.asset_path }}/*" -Destination ${{ env.output_asset_path }} -Recurse
        Copy-Item -Path "${{ env.shader_path }}/*" -Destination ${{ env.output_shader_path }} -Recurse
        Write-Host "Dependencies copied successfully!"

    - name: Zip output folder
      shell: pwsh
      run: |
        Compress-Archive -Path "${{ env.output_path }}" -DestinationPath "${{ env.zip_file_name }}-${{ env.version }}.zip"
        Write-Host "Folder compressed successfully!"

    - name: Create tag
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/tags/v${{ env.version }}',
            sha: context.sha
          })

    - name: Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.version }}
        name: space_fighter_${{ env.version }}
        draft: false
        prerelease: false
        files: |
          ${{ env.zip_file_name }}-${{ env.version }}.zip
        body: |
          [Changelog](https://github.com/${{github.repository}}/blob/${{ steps.extract_metadata.outputs.branch }}/CHANGELOG.md)